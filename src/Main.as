package {	import com.google.cognizant.video.data.ScheduledData;	import com.google.cognizant.video.utils.dateSwap;	import flash.events.Event;	import flash.display.MovieClip;	import com.google.ads.studio.utils.StudioClassAccessor;	import flash.display.DisplayObject;	import com.google.cognizant.video.components.VideoPlayer;	import com.google.cognizant.video.data.PlayerSettings;	import com.google.cognizant.video.data.VideoData;	import flash.geom.Rectangle;	import com.google.ads.studio.video.VideoPlayerAdvanced;	import com.google.ads.studio.events.StudioVideoEvent;	import com.google.cognizant.video.events.CustomVideoEvent;	import com.google.cognizant.video.data.VideoEventData;	import com.google.ads.studio.utils.Logger;		/**	 * ...	 * @author Rafael Nepomuceno	 */	public class Main extends MovieClip {		public var testVid:VideoPlayerAdvanced;				public function Main():void {			if (stage) init();			else addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event = null):void {			removeEventListener(Event.ADDED_TO_STAGE, init);			// entry point						Logger.setLoggingCallback(null);			//dateSwapTest();			testVideoPlayer();			VideoPlayer.addAllEventListeners(videosEventHandler);			//VideoPlayer.getCurrentVideo().next();//			VideoPlayer.getCurrentVideo().seek(10);//			VideoPlayer.getCurrentVideo().previous();//			VideoPlayer.getCurrentVideo().pause();//			VideoPlayer.getCurrentVideo().seek(10);//			//			VideoPlayer.getCurrentVideo().play();//			VideoPlayer.getCurrentVideo().pause();//			VideoPlayer.getCurrentVideo().previous();//			VideoPlayer.getCurrentVideo().seek(20);//			VideoPlayer.getCurrentVideo().unmute();//			VideoPlayer.getCurrentVideo().pause();//			VideoPlayer.getCurrentVideo().pause();			//testVid.isVideoMuted(		}				private function dateSwapTest ():void {			var testDate:Date = new Date(2015, 5, 7); // For testing						var schedPre:ScheduledData = new ScheduledData('pre', new Date(2015, 5, 6, 23), new Date(2015, 5, 7));			var schedNow:ScheduledData = new ScheduledData('now', new Date(2015, 5, 7), new Date(2015, 5, 9));			var schedPost:ScheduledData = new ScheduledData('post', new Date(2015, 5, 9), new Date(2015, 5, 10));						//trace(dateSwap([schedPre, schedNow, schedPost]));			trace(dateSwap([schedPre, schedNow, schedPost], testDate)); // Test using test date			// -- result 'now'					}				private function testVideoPlayer ():void {			var id:String = 'testVid';			var streamingData:Array = null;			var progressiveData:Array = [new VideoData('vid', 'video.flv'), new VideoData('vid2', 'video2.flv')];			var dimension:Rectangle = new Rectangle(0, 0, 320, 250);			var startMuted:Boolean = false;			var autoPlay:Boolean = false;			var previewTime:Number = 0;			var componentInstance:Object = null; // VideoPlayerAdvanced instance			var autoDestroy:Boolean = true;			var settings:PlayerSettings = new PlayerSettings(id, streamingData, progressiveData, dimension, startMuted, autoPlay, previewTime, componentInstance, autoDestroy);						var video:VideoPlayer = new VideoPlayer();			video.init(settings);						addChild(video);		}				private function videosEventHandler (e:CustomVideoEvent):void {			trace('> CustomVideoEvent', e.type, '\t->\t' + e.data.toString());			switch (e.type) {				case CustomVideoEvent.BUFFERED:					break;				case CustomVideoEvent.DURATION:					break;				case CustomVideoEvent.PLAY:					break;				case CustomVideoEvent.PAUSE:					break;				case CustomVideoEvent.MUTE:					break;				case CustomVideoEvent.UNMUTE:					break;				case CustomVideoEvent.FIRST_QUARTILE:					break;				case CustomVideoEvent.MID_POINT:					break;				case CustomVideoEvent.THIRD_QUARTILE:					break;				case CustomVideoEvent.PLAYHEAD_MOVE:					break;				case CustomVideoEvent.COMPLETE:					break;				case CustomVideoEvent.REPLAY:					break;				case CustomVideoEvent.SKIP:					break;				case CustomVideoEvent.PREVIEW_COMPLETE:					break;				case CustomVideoEvent.COMPLETE_ALL:					break;				case CustomVideoEvent.VIDEO_VIEW_TIMER_START:					break;				case CustomVideoEvent.VIDEO_VIEW_TIMER_STOP:					break;				case CustomVideoEvent.USER_CLICK_TO_PLAY:					break;				case CustomVideoEvent.USER_SEEK:					break;				case CustomVideoEvent.USER_PLAY:					break;				case CustomVideoEvent.USER_PAUSE:					break;				case CustomVideoEvent.USER_MUTE:					break;				case CustomVideoEvent.USER_UNMUTE:					break;				case CustomVideoEvent.USER_REPLAY:					break;				case CustomVideoEvent.CONNECTION_ERROR:					break;				default:			}		}	}	}