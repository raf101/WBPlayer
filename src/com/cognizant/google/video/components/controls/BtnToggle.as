package  {	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.MovieClip;		/**	 * ...	 * 	 * @author ...	 * 	 * @created mm/dd/yyyy 00:00 AM	 */	public class BtnToggle extends MovieClip {				// NOTE: This should be the order of access modifiers per section.		// - PUBLIC		// - INTERNAL		// - PROTECTED		// - PRIVATE				// Please use these section dividers as the guide limit length of chars per line.		// ------------------------------- STATIC VARIABLES --------------------------------				// ----------------------------------- VARIABLES -----------------------------------						private var _untoggle:MovieClip;		private var _toggled:MovieClip;		private var _isToggle:Boolean;				// --------------=--------------- STATIC GETTERS/SETTERS ---------------------------				// --------------------------- OVERRIDEN GETTERS/SETTERS ---------------------------				// ------------------------------- GETTERS/SETTERS ---------------------------------				// ------------------------------- STATIC METHODS ----------------------------------				// -------------------------------- CONSTRUCTOR ------------------------------------				public function BtnToggle (untoggle:MovieClip, toggled:MovieClip) {			// constructor code						untoggle.buttonMode = toggled.buttonMode = true;			untoggle.mouseChildren = toggled.mouseChildren = false;						_untoggle = untoggle;			_toggled = toggled;			addEventListener(Event.ADDED_TO_STAGE, init);		}						// ----------------------------- OVERRIDEN METHODS ---------------------------------				// ------------------------   OVERRIDEN EVENT HANDLERS -----------------------------				// ---------------------------------  METHODS --------------------------------------				// ------------------------------ EVENT HANDLERS -----------------------------------		private function init (e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, init);			addEventListener(Event.REMOVED_FROM_STAGE, removeFromStageHandler);						_toggled.addEventListener(MouseEvent.CLICK, clickHandler);			_untoggled.addEventListener(MouseEvent.CLICK, clickHandler);		}				private function clickHandler (e:MouseEvent):void {			_isToggle = !_isToggle;						_untoggled.visible = !(_toggled.visible = _isToggle);						if (_isToggle) {				dispatchEvent(new Event('toggled'));			} else {				dispatchEvent(new Event('untoggled'));			}		}				private function removeFromStageHandler (e:Event):void {			removeEventListener(Event.REMOVED_FROM_STAGE, removeFromStageHandler);						_toggled.removeEventListener(MouseEvent.CLICK, clickHandler);			_untoggled.removeEventListener(MouseEvent.CLICK, clickHandler);		}				public function destroy ():void {			removeFromStageHandler(null);		}	}	}