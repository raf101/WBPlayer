package com.cognizant.google.video.components.controls {	import com.cognizant.google.video.components.ExPlayer;	import com.cognizant.google.video.data.VideoEventData;	import com.cognizant.google.video.events.CustomVideoEvent;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.EventDispatcher;		/**	 * ...	 * 	 * @author ...	 * 	 * @created mm/dd/yyyy 00:00 AM	 */	public class PlaybackController extends EventDispatcher {				// NOTE: This should be the order of access modifiers per section.		// - PUBLIC		// - INTERNAL		// - PROTECTED		// - protected				// Please use these section dividers as the guide limit length of chars per line.		// ------------------------------- STATIC VARIABLES --------------------------------				// ----------------------------------- VARIABLES -----------------------------------		protected var _seekBar:Slider;		protected var _playToggle:BtnToggle;		protected var _stopToggle:BtnToggle;		protected var _muteToggle:BtnToggle;		protected var _fullscreenToggle:BtnToggle;		protected var _btnReplay:DisplayObject;		protected var _skipToggles:Object = {};				protected var _video:ExPlayer;		protected var _startMuted:Boolean;				protected var _playState:Boolean;		protected var _muteState:Boolean;				// --------------=--------------- STATIC GETTERS/SETTERS ---------------------------				// --------------------------- OVERRIDEN GETTERS/SETTERS ---------------------------				// ------------------------------- GETTERS/SETTERS ---------------------------------		public function get video ():ExPlayer {			return _video;		}		public function get seekBar ():Slider {			return _seekBar;		}		public function get playToggle ():BtnToggle {			return _playToggle;		}		public function get stopToggle ():BtnToggle {			return _stopToggle;		}		public function get muteToggle ():BtnToggle {			return _muteToggle;		}		public function get fullscreenToggle ():BtnToggle {			return _fullscreenToggle;		}				public function get btnReplay ():DisplayObject {			return _btnReplay;		}				public function getSkipToggle (index:int):BtnToggle {			return _skipToggles[index];		}				// ------------------------------- STATIC METHODS ----------------------------------				// -------------------------------- CONSTRUCTOR ------------------------------------				public function PlaybackController (video:ExPlayer) {			// constructor code			init(video);		}				// ----------------------------- OVERRIDEN METHODS ---------------------------------				// ------------------------   OVERRIDEN EVENT HANDLERS -----------------------------				// ---------------------------------  METHODS --------------------------------------		public function init (video:ExPlayer, isReset:Boolean = true):void {			if (!video) {				destroy();				return;			} else {				destroyVideo();			}							_video = video;			_video.addEventListener(CustomVideoEvent.PLAYHEAD_MOVE, playheadMoveHandler);			_video.addEventListener(CustomVideoEvent.SKIP, skipHandler);			_video.addEventListener(CustomVideoEvent.COMPLETE, completeHandler);			_video.addEventListener(CustomVideoEvent.COMPLETE_ALL, completeHandler);						_video.addEventListener(CustomVideoEvent.PLAY, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.PAUSE, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.STOP, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.MUTE, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.UNMUTE, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.REPLAY, videoStateChangedHandler);						_video.addEventListener(CustomVideoEvent.USER_PLAY, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.USER_PAUSE, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.USER_STOP, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.USER_MUTE, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.USER_UNMUTE, videoStateChangedHandler);			_video.addEventListener(CustomVideoEvent.USER_REPLAY, videoStateChangedHandler);						if (!isReset) {				_playState = _video.settings.autoPlay;				_muteState = _startMuted = _video.settings.startMuted;			} else {				_playState = false;			}						if (_seekBar)				_seekBar.update(0);			updatePlaybackButtonState();		}				private function videoStateChangedHandler (e:CustomVideoEvent):void {			switch (e.type) {				case CustomVideoEvent.PLAY:				case CustomVideoEvent.USER_PLAY:					_playState = true;					if (_btnReplay) _btnReplay.visible = false;					if (_stopToggle) {						_stopToggle.enable(_playState);						_stopToggle.toggle(!_playState);					}							break;				case CustomVideoEvent.PAUSE:				case CustomVideoEvent.USER_PAUSE:					_playState = false;					if (_btnReplay) _btnReplay.visible = false;					if (_stopToggle) {						_stopToggle.enable(_playState);						_stopToggle.toggle(!_playState);					}					break;				case CustomVideoEvent.STOP:				case CustomVideoEvent.USER_STOP:					_playState = false;					if (_btnReplay) _btnReplay.visible = true;					break;				case CustomVideoEvent.MUTE:				case CustomVideoEvent.USER_MUTE:					_muteState = true;					break;				case CustomVideoEvent.UNMUTE:				case CustomVideoEvent.USER_UNMUTE:					_muteState = false;					break;				case CustomVideoEvent.REPLAY:				case CustomVideoEvent.USER_REPLAY:					if (_stopToggle) {						_stopToggle.enable(true);						_stopToggle.toggle(false);					}							break;			}						updatePlaybackButtonState();		}								public function setPlayToggle (clip:MovieClip):void {			destroyPlayToggle();			if (!clip) return;						_playToggle = new BtnToggle(clip);						_playToggle.addEventListener('toggled', playHandler);			_playToggle.addEventListener('untoggled', pauseHandler);									_playToggle.toggle(_playState);		}				public function setMuteToggle (clip:MovieClip):void {			destroyMuteToggle();			if (!clip) return;						_muteToggle = new BtnToggle(clip);						_muteToggle.addEventListener('toggled', muteHandler);			_muteToggle.addEventListener('untoggled', unmuteHandler);						_muteToggle.toggle(_muteState);		}				public function setFullscreenToggle (clip:MovieClip):void {			destroyFullscreenToggle();			if (!clip) return;						_fullscreenToggle = new BtnToggle(clip);						_fullscreenToggle.addEventListener('toggled', fullscreenHandler);			_fullscreenToggle.addEventListener('untoggled', exitFullscreenHandler);						_fullscreenToggle.toggle(false);		}				public function setStopToggle (clip:MovieClip):void {			destroyStopToggle();			if (!clip) return;						_stopToggle = new BtnToggle(clip);						_stopToggle.addEventListener('toggled', stopHandler);			_stopToggle.toggle(!_playState);			_stopToggle.enable(_playState);		}				public function setSkipToToggle (clip:MovieClip, index:int):void {			destroySkipToToggles(index);			if (!clip) return;						var skipToggle:BtnToggle = new BtnToggle(clip);			skipToggle.id = String(index);			skipToggle.addEventListener('toggled', skipToHandler);			_skipToggles[index] = skipToggle;						updateSkipToButtonState(_video.getCurrentVideoIndex());		}				public function setReplayButton (clip:DisplayObject):void {			destroyBtnReplay();			if (!clip) return;						if (clip is MovieClip) {				MovieClip(clip).buttonMode = true;				MovieClip(clip).mouseChildren = false;			}						clip.addEventListener(MouseEvent.CLICK, replayHandler);			clip.visible = false;						_btnReplay = clip;		}				public function setSeekBar (bar:DisplayObject, hitArea:DisplayObject, knob:DisplayObject = null):void {			destroySeekBar();			if (!bar) return;						_seekBar = new Slider(bar, hitArea, knob);						_seekBar.addEventListener('startDrag', startSeekHandler);			_seekBar.addEventListener('stopDrag', stopSeekHandler);			_seekBar.addEventListener('update', updateSeekHandler);		}				public function replay (fromInteraction:Boolean = false):void {			_playState = true;			_muteState = false;						_video.unmute();			_video.replay(fromInteraction);						if (_btnReplay) _btnReplay.visible = false;		}				public function play (fromInteraction:Boolean = false):void {			_playState = true;			_muteState = false;						_video.unmute(); // Unmute the video because the user interacted.			_video.play(fromInteraction);						if (_btnReplay) _btnReplay.visible = false;		}				public function pause (fromInteraction:Boolean = false):void {			_playState = false;						_video.pause(fromInteraction);		}				public function stop (fromInteraction:Boolean = false):void {			_playState = false;						_video.stop(fromInteraction);						if (_btnReplay) _btnReplay.visible = true;		}				public function mute (fromInteraction:Boolean = false):void {			_muteState = true;						_video.mute(fromInteraction);		}				public function unmute (fromInteraction:Boolean = false):void {			_muteState = false;						_video.unmute(fromInteraction);			if (_startMuted) {				_playState = true;				_startMuted = false;				_video.replay();			}		}		public function skipTo (index:int):void {			_playState = true;			_muteState = false;						_video.unmute();			_video.skipTo(index);		}		public function seek (sec:Number):void {			_playState = true;			_muteState = false;						var duration:Number = _video.currentController.getDuration();			if (sec < duration)				sec = Math.min(sec, duration - 3);			else sec = duration;						_video.seek(sec);						_video.unmute();			_video.play();		}				public function destroy ():void {			destroyPlayToggle();			destroyMuteToggle();			destroyStopToggle();			destroySeekBar();			destroyFullscreenToggle();			destroyBtnReplay();			destroyVideo();			destroySkipToToggles(-1);		}				protected function interacted ():void {			dispatchEvent(new CustomVideoEvent(CustomVideoEvent.INTERACTED, new VideoEventData(_video.id, _video.currentController.getReportingIdentifier(), _video.getCurrentVideoIndex())));		}				protected function destroyPlayToggle ():void {			if (_playToggle) { 				_playToggle.removeEventListener('toggled', playHandler);				_playToggle.removeEventListener('untoggled', pauseHandler);				_playToggle.destroy(); 				_playToggle = null;			}		}		protected function destroyMuteToggle ():void {			if (_muteToggle) {				_muteToggle.removeEventListener('toggled', muteHandler);				_muteToggle.removeEventListener('untoggled', unmuteHandler);				_muteToggle.destroy();				_muteToggle = null;			}		}		protected function destroyFullscreenToggle ():void {			if (_fullscreenToggle) {				_fullscreenToggle.removeEventListener('toggled', fullscreenHandler);				_fullscreenToggle.removeEventListener('untoggled', exitFullscreenHandler);				_fullscreenToggle.destroy();				_fullscreenToggle = null;			}		}		protected function destroyStopToggle ():void {			if (_stopToggle) {				_stopToggle.removeEventListener('toggled', stopHandler);				_stopToggle.destroy();				_stopToggle = null;			}		}		protected function destroySeekBar ():void {			if (_seekBar) {				_seekBar.removeEventListener('startDrag', startSeekHandler);				_seekBar.removeEventListener('stopDrag', stopSeekHandler);				_seekBar.removeEventListener('update', updateSeekHandler);				_seekBar.destroy();				_seekBar = null;			}		}		protected function destroyBtnReplay ():void {			if (_btnReplay) {				_btnReplay.removeEventListener(MouseEvent.CLICK, replayHandler);				_btnReplay = null;			}		}		protected function destroyVideo ():void {			if (_video) {				_video.removeEventListener(CustomVideoEvent.PLAYHEAD_MOVE, playheadMoveHandler);				_video.removeEventListener(CustomVideoEvent.SKIP, skipHandler);				_video.removeEventListener(CustomVideoEvent.COMPLETE, completeHandler);								_video.removeEventListener(CustomVideoEvent.PLAY, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.PAUSE, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.STOP, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.MUTE, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.UNMUTE, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.REPLAY, videoStateChangedHandler);							_video.removeEventListener(CustomVideoEvent.USER_PLAY, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.USER_PAUSE, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.USER_STOP, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.USER_MUTE, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.USER_UNMUTE, videoStateChangedHandler);				_video.removeEventListener(CustomVideoEvent.USER_REPLAY, videoStateChangedHandler);				_video = null;			}		}		protected function destroySkipToToggles (index:int):void {			for each (var btn:BtnToggle in _skipToggles) {				if (btn.id == String(index)) btn.destroy();			}			if (index == -1) _skipToggles = {};		}				protected function updateSkipToButtonState (currentIndex:int):void {			for each (var btn:BtnToggle in _skipToggles) {				var bool:Boolean = btn.id == String(currentIndex);				btn.enable(!bool);				btn.toggle(bool);			}		}				protected function updatePlaybackButtonState ():void {			if (_playToggle)				_playToggle.toggle(_playState);							if (_stopToggle) {				_stopToggle.enable(_playState);				_stopToggle.toggle(!_playState);			}									if (_muteToggle)				_muteToggle.toggle(_muteState);		}				// ------------------------------ MOUSE EVENT HANDLERS -----------------------------------		protected function replayHandler (e:MouseEvent):void {			interacted();			replay(true);		}								// ------------------------------ CONTROLS EVENT HANDLERS -----------------------------------		protected function playHandler (e:Event):void {			interacted();			play(true);		}		protected function pauseHandler (e:Event):void {			interacted();			pause(true);		}		protected function stopHandler (e:Event):void {			interacted();			stop(true);		}		protected function muteHandler (e:Event):void {			interacted();			mute(true);		}		protected function unmuteHandler (e:Event):void {			interacted();			unmute(true);		}		protected function fullscreenHandler (e:Event):void {			interacted();			_muteState = false;			if (_btnReplay) _btnReplay.visible = false;			_video.enterFullscreen();					}		protected function exitFullscreenHandler (e:Event):void {			interacted();			_video.exitFullScreen();					}				protected function skipToHandler (e:Event):void {			interacted();			skipTo(int(e.target.id));		}					protected function startSeekHandler (e:Event):void {			interacted();			//_video.pause();						if (_btnReplay) _btnReplay.visible = false;		}		protected function stopSeekHandler (e:Event):void {			_playState = true;			_muteState = false;						var elapsed:Number = Math.round(_video.currentController.getElapsed());			var duration:Number = int(_video.currentController.getDuration());			if (elapsed >= duration)				_video.seek(duration);						_video.unmute();			_video.play();						updatePlaybackButtonState();		}		protected function updateSeekHandler (e:Event):void {			var duration:Number = _video.currentController.getDuration();			var sec:Number = _seekBar.getValue() * duration;			if (sec < duration)				sec = Math.min(sec, duration - 3);						_video.seek(sec, true);		}								// ------------------------------ EXPLAYER EVENT HANDLERS -----------------------------------		protected function skipHandler (e:CustomVideoEvent):void {			updateSkipToButtonState(e.data.index);		}				protected function playheadMoveHandler (e:CustomVideoEvent):void {			if (_seekBar)				_seekBar.update(e.data.elapsed / e.data.duration);		}				protected function completeHandler (e:CustomVideoEvent):void {						var isShowReplay:Boolean;			if (_video.settings.autoAdvanceVideoOnComplete) {				if (e.type == CustomVideoEvent.COMPLETE_ALL) 					isShowReplay = true;			} else {				isShowReplay = true;			}						if (isShowReplay) {				_playState = false;								if (_btnReplay) _btnReplay.visible = true;			}						updatePlaybackButtonState();		}									}	}