package com.cognizant.google.video.components.controls {	import flash.display.Sprite;	import com.cognizant.google.video.components.ExPlayer;	import com.cognizant.google.video.events.CustomVideoEvent;	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.DisplayObject;	import flash.events.MouseEvent;		/**	 * ...	 * 	 * @author ...	 * 	 * @created mm/dd/yyyy 00:00 AM	 */	public class PlaybackController extends Sprite {				// NOTE: This should be the order of access modifiers per section.		// - PUBLIC		// - INTERNAL		// - PROTECTED		// - PRIVATE				// Please use these section dividers as the guide limit length of chars per line.		// ------------------------------- STATIC VARIABLES --------------------------------				// ----------------------------------- VARIABLES -----------------------------------		private var _seekBar:Slider;		private var _playToggle:BtnToggle;		private var _stopToggle:BtnToggle;		private var _muteToggle:BtnToggle;		private var _btnReplay:DisplayObject;		private var _skipToggles:Object = {};				private var _video:ExPlayer;		private var _startMuted:Boolean;				private var _playState:Boolean;		private var _muteState:Boolean;				// --------------=--------------- STATIC GETTERS/SETTERS ---------------------------				// --------------------------- OVERRIDEN GETTERS/SETTERS ---------------------------				// ------------------------------- GETTERS/SETTERS ---------------------------------		public function get video ():ExPlayer {			return _video;		}		public function get seekBar ():Slider {			return _seekBar;		}		public function get playToggle ():BtnToggle {			return _playToggle;		}		public function get stopToggle ():BtnToggle {			return _stopToggle;		}		public function get muteToggle ():BtnToggle {			return _muteToggle;		}				public function get btnReplay ():DisplayObject {			return _btnReplay;		}				public function getSkipToggle (index:int):BtnToggle {			return _skipToggles[index];		}				// ------------------------------- STATIC METHODS ----------------------------------				// -------------------------------- CONSTRUCTOR ------------------------------------				public function PlaybackController (video:ExPlayer) {			// constructor code			init(video);		}				// ----------------------------- OVERRIDEN METHODS ---------------------------------				// ------------------------   OVERRIDEN EVENT HANDLERS -----------------------------				// ---------------------------------  METHODS --------------------------------------		public function init (video:ExPlayer):void {			if (_video) {				_video.removeEventListener(CustomVideoEvent.PLAYHEAD_MOVE, playheadMoveHandler);				_video.removeEventListener(CustomVideoEvent.SKIP, skipHandler);				_video.removeEventListener(CustomVideoEvent.COMPLETE, completeHandler);				_video = null;			}			if (!_video) {				destroy();				return;			}							_video = video;			_video.addEventListener(CustomVideoEvent.PLAYHEAD_MOVE, playheadMoveHandler);			_video.addEventListener(CustomVideoEvent.SKIP, skipHandler);			_video.addEventListener(CustomVideoEvent.COMPLETE, completeHandler);						_playState = _video.settings.autoPlay;			_muteState = _startMuted = _video.settings.startMuted		}				public function setPlayToggle (clip:MovieClip):void {			if (_playToggle) {				_playToggle.removeEventListener('toggled', playHandler);				_playToggle.removeEventListener('untoggled', pauseHandler);				_playToggle.destroy();				_playToggle = null;			}			if (!clip) return;						_playToggle = new BtnToggle(clip);						_playToggle.addEventListener('toggled', playHandler);			_playToggle.addEventListener('untoggled', pauseHandler);									_playToggle.toggle(_playState);		}				public function setMuteToggle (clip:MovieClip):void {			if (_muteToggle) {				_muteToggle.removeEventListener('toggled', muteHandler);				_muteToggle.removeEventListener('untoggled', unmuteHandler);				_muteToggle.destroy();				_muteToggle = null;			}			if (!clip) return;						_muteToggle = new BtnToggle(clip);						_muteToggle.addEventListener('toggled', muteHandler);			_muteToggle.addEventListener('untoggled', unmuteHandler);						_muteToggle.toggle(_muteState);		}				public function setStopToggle (clip:MovieClip):void {			if (_stopToggle) {				_stopToggle.removeEventListener('toggled', stopHandler);				_stopToggle.destroy();				_stopToggle = null;			}			if (!clip) return;						_stopToggle = new BtnToggle(clip);						_stopToggle.addEventListener('toggled', stopHandler);			_stopToggle.toggle(!_playState);			_stopToggle.enable(_playState);		}				public function setSkipToToggle (clip:MovieClip, index:int):void {			if (_skipToggles[index]) {				_skipToggles[index].removeEventListener('toggled', skipToHandler);				_skipToggles[index].destroy();			}			if (!clip) return;						var skipToggle:BtnToggle = new BtnToggle(clip);			skipToggle.id = String(index);			_skipToggles[index] = skipToggle;			skipToggle.addEventListener('toggled', skipToHandler);						updateSkipToButtonState(_video.getCurrentVideoIndex());		}				public function setReplayButton (clip:DisplayObject):void {			if (_btnReplay) {				_btnReplay.removeEventListener(MouseEvent.CLICK, replayHandler);				_btnReplay = null;			}			if (!clip) return;						if (clip is MovieClip) {				MovieClip(clip).buttonMode = true;				MovieClip(clip).mouseChildren = false;			}						clip.addEventListener(MouseEvent.CLICK, replayHandler);			clip.visible = false;						_btnReplay = clip;		}				public function setSeekBar (bar:DisplayObject, hitArea:DisplayObject, knob:DisplayObject = null):void {			if (_seekBar) {				_seekBar.removeEventListener('startDrag', startSeekHandler);				_seekBar.removeEventListener('stopDrag', stopSeekHandler);				_seekBar.removeEventListener('update', updateSeekHandler);				_seekBar.destroy();				_seekBar = null;			}			if (!bar) return;						_seekBar = new Slider(bar, hitArea, knob);						_seekBar.addEventListener('startDrag', startSeekHandler);			_seekBar.addEventListener('stopDrag', stopSeekHandler);			_seekBar.addEventListener('update', updateSeekHandler);		}				public function destroy ():void {			if (_playToggle) { 				_playToggle.removeEventListener('toggled', playHandler);				_playToggle.removeEventListener('untoggled', pauseHandler);				_playToggle.destroy(); 				_playToggle = null;			}			if (_muteToggle) {				_muteToggle.removeEventListener('toggled', muteHandler);				_muteToggle.removeEventListener('untoggled', unmuteHandler);				_muteToggle.destroy();				_muteToggle = null;			}			if (_stopToggle) {				_stopToggle.removeEventListener('toggled', stopHandler);				_stopToggle.destroy();				_stopToggle = null;			}			if (_seekBar) {				_seekBar.removeEventListener('startDrag', startSeekHandler);				_seekBar.removeEventListener('stopDrag', stopSeekHandler);				_seekBar.removeEventListener('update', updateSeekHandler);				_seekBar.destroy();				_seekBar = null;			}			if (_btnReplay) {				_btnReplay.removeEventListener(MouseEvent.CLICK, replayHandler);				_btnReplay = null;			}			if (_video) {				_video.removeEventListener(CustomVideoEvent.PLAYHEAD_MOVE, playheadMoveHandler);				_video.removeEventListener(CustomVideoEvent.SKIP, skipHandler);				_video.removeEventListener(CustomVideoEvent.COMPLETE, completeHandler);				_video = null;			}			for each (var btn:BtnToggle in _skipToggles) {				btn.destroy();			}			_skipToggles = {};		}				private function updateSkipToButtonState (currentIndex:int):void {			for each (var btn:BtnToggle in _skipToggles) {				var bool:Boolean = btn.id == String(currentIndex);				btn.enable(!bool);				btn.toggle(bool);			}		}				private function updatePlaybackButtonState ():void {			if (_playToggle)				_playToggle.toggle(_playState);							if (_stopToggle) {				_stopToggle.enable(_playState);				_stopToggle.toggle(!_playState);			}									if (_muteToggle)				_muteToggle.toggle(_muteState);		}								// ------------------------------ MOUSE EVENT HANDLERS -----------------------------------		private function replayHandler (e:MouseEvent):void {			_playState = true;			_muteState = false;						_video.unmute();			_video.replay(true);						if (_btnReplay) _btnReplay.visible = false;						updatePlaybackButtonState();		}								// ------------------------------ CONTROLS EVENT HANDLERS -----------------------------------		private function playHandler (e:Event):void {			_playState = true;			_muteState = false;						_video.play(true);			_video.unmute(); // Unmute the video because the user interacted.						if (_btnReplay) _btnReplay.visible = false;						updatePlaybackButtonState();		}		private function pauseHandler (e:Event):void {			_playState = false;						_video.pause(true);		}		private function stopHandler (e:Event):void {			_playState = false;						_video.stop(true);						if (_btnReplay) _btnReplay.visible = true;						updatePlaybackButtonState();		}		private function muteHandler (e:Event):void {			_muteState = true;						_video.mute(true);		}		private function unmuteHandler (e:Event):void {			_muteState = false;						_video.unmute(true);			if (_startMuted) {				_playState = true;				_startMuted = false;				_video.replay();			}		}				private function skipToHandler (e:Event):void {			_playState = true;			_muteState = false;						var target:BtnToggle = BtnToggle(e.target);			var index:int = int(target.id);			_video.unmute();			_video.skipTo(index);						updatePlaybackButtonState();		}					private function startSeekHandler (e:Event):void {			_video.pause();		}		private function stopSeekHandler (e:Event):void {			_playState = true;			_muteState = false;						var elapsed:Number = Math.round(_video.currentController.getElapsed());			var duration:Number = int(_video.currentController.getDuration());			if (elapsed >= duration)				_video.seek(duration);						_video.unmute();			_video.play();						updatePlaybackButtonState();		}		private function updateSeekHandler (e:Event):void {			var duration:Number = _video.currentController.getDuration();			var sec:Number = _seekBar.getValue() * duration;			if (sec < duration)				sec = Math.min(sec, duration - 3);						_video.seek(sec, true);		}								// ------------------------------ EXPLAYER EVENT HANDLERS -----------------------------------		private function skipHandler (e:CustomVideoEvent):void {			updateSkipToButtonState(e.data.index);		}				private function playheadMoveHandler (e:CustomVideoEvent):void {			_seekBar.update(e.data.elapsed / e.data.duration);		}				private function completeHandler (e:CustomVideoEvent):void {			_playState = false;						if (_btnReplay) _btnReplay.visible = true;						updatePlaybackButtonState();		}					}	}