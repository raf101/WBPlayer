package com.cognizant.google.video.components.controls {	import flash.display.Sprite;	import com.cognizant.google.video.components.ExPlayer;	import flash.display.MovieClip;	import flash.events.Event;		/**	 * ...	 * 	 * @author ...	 * 	 * @created mm/dd/yyyy 00:00 AM	 */	public class PlaybackController extends Sprite {				// NOTE: This should be the order of access modifiers per section.		// - PUBLIC		// - INTERNAL		// - PROTECTED		// - PRIVATE				// Please use these section dividers as the guide limit length of chars per line.		// ------------------------------- STATIC VARIABLES --------------------------------				// ----------------------------------- VARIABLES -----------------------------------		private var _playToggle:BtnToggle;		private var _muteToggle:BtnToggle;		private var _seekBar:Slider;				// --------------=--------------- STATIC GETTERS/SETTERS ---------------------------				// --------------------------- OVERRIDEN GETTERS/SETTERS ---------------------------				// ------------------------------- GETTERS/SETTERS ---------------------------------				// ------------------------------- STATIC METHODS ----------------------------------				// -------------------------------- CONSTRUCTOR ------------------------------------				public function PlaybackController () {			// constructor code		}				public function setPlayToggle (play:MovieClip, pause:MovieClip):void {			if (_playToggle) {				_playToggle.destroy();				_playToggle.removeEventListener('toggled', playHandler);				_playToggle.removeEventListener('untoggled', pauseHandler);			}			_playToggle = new BtnToggle(play, pause);						_playToggle.addEventListener('toggled', playHandler);			_playToggle.addEventListener('untoggled', pauseHandler);		}				public function setMuteToggle (mute:MovieClip, unmute:MovieClip):void {			if (_muteToggle) {				_muteToggle.destroy();				_muteToggle.removeEventListener('toggled', muteHandler);				_muteToggle.removeEventListener('untoggled', unmuteHandler);			}			_muteToggle = new BtnToggle(mute, unmute);						_muteToggle.addEventListener('toggled', muteHandler);			_muteToggle.addEventListener('untoggled', unmuteHandler);		}				public function setSeekBar (handle:MovieClip, bar:MovieClip, hitArea:MovieClip):void {			if (_seekBar) {				_seekBar.destroy();				_seekBar.removeEventListener('startDrag', startSeekHandler);				_seekBar.removeEventListener('stopDrag', stopSeekHandler);				_seekBar.removeEventListener('update', updateSeekHandler);			}			_seekBar = new Slider(handle, bar, hitArea);						_seekBar.addEventListener('startDrag', startSeekHandler);			_seekBar.addEventListener('stopDrag', stopSeekHandler);			_seekBar.addEventListener('update', updateSeekHandler);		}						// ----------------------------- OVERRIDEN METHODS ---------------------------------				// ------------------------   OVERRIDEN EVENT HANDLERS -----------------------------				// ---------------------------------  METHODS --------------------------------------		public function init (video:ExPlayer, type:int = 0):void {					}				// ------------------------------ EVENT HANDLERS -----------------------------------		private function playHandler (e:Event):void {					}		private function pauseHandler (e:Event):void {					}		private function muteHandler (e:Event):void {					}		private function unmuteHandler (e:Event):void {								}		private function startSeekHandler (e:Event):void {					}		private function stopSeekHandler (e:Event):void {					}		private function updateSeekHandler (e:Event):void {					}	}	}