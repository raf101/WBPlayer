package  {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		/**	 * ...	 * 	 * @author ...	 * 	 * @created mm/dd/yyyy 00:00 AM	 */	public class Slider extends MovieClip {				// NOTE: This should be the order of access modifiers per section.		// - PUBLIC		// - INTERNAL		// - PROTECTED		// - PRIVATE				// Please use these section dividers as the guide limit length of chars per line.		// ------------------------------- STATIC VARIABLES --------------------------------				// ----------------------------------- VARIABLES -----------------------------------		public var _handle:MovieClip;		public var _bar:MovieClip;		private var _hitArea:MovieClip;				private var _bound:Rectangle;		private var _barWidth:Number;		private var _handleWidth:Number;		private var _handleHalfWidth:Number;		private var _isDrag:Boolean;								// --------------=--------------- STATIC GETTERS/SETTERS ---------------------------				// --------------------------- OVERRIDEN GETTERS/SETTERS ---------------------------				// ------------------------------- GETTERS/SETTERS ---------------------------------		public function get isDrag ():Boolean {			return _isDrag;		}				public function get barWidth ():Number {			return _barWidth;		}						// ------------------------------- STATIC METHODS ----------------------------------				// -------------------------------- CONSTRUCTOR ------------------------------------				public function Slider (handle:MovieClip, bar:MovieClip, hitArea:MovieClip) {			// constructor code			_handle = handle;			_bar = bar;			_hitArea = hitArea;			addEventListener(Event.ADDED_TO_STAGE, init);		}						// ----------------------------- OVERRIDEN METHODS ---------------------------------				// ------------------------   OVERRIDEN EVENT HANDLERS -----------------------------				// ---------------------------------  METHODS --------------------------------------		public function updateBar (value:Number):void {			_bar.scaleX = value;		}				public function updateHandle (value:Number):void {			_handle.x = value;		}				public function getValue ():Number {			return _bar.scaleX;		}				public function getBarScaleX (handlePos:Number):Number {			var offset:Number = _handleHalfWidth;			var value:Number = (handlePos - offset) / ( _barWidth -  _handleWidth );						return value;		}				public function getHandlePos (barScaleX:Number):Number {			var value:Number = barScaleX * ( _barWidth -  _handleWidth );			var offset:Number = _handleHalfWidth;						return offset + value;		}						// ------------------------------ EVENT HANDLERS -----------------------------------		private function init (e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, init);			addEventListener(Event.REMOVED_FROM_STAGE, removeFromStageHandler);						_exEnabler = ExProxyEnablerMax.getInstance();									_hitArea.buttonMode = true;			_bar.buttonMode = false;			_barWidth = _bar.width;									if (_handle) {				_handle.buttonMode = true;				_handleWidth = _handle.width;				_handleHalfWidth = _handleWidth * 0.5;								_bound = new Rectangle(handleHalfWidth, _handle.y, _barWidth - _handleHalfWidth, 0);								_handle.addEventListener(MouseEvent.MOUSE_DOWN, handleDownHandler);			}						_hitArea.addEventListener(MouseEvent.MOUSE_DOWN, barDownHandler);						stage.addEventListener(MouseEvent.MOUSE_UP, upHandler);		}				private function handleDownHandler (e:MouseEvent):void {			// start drag			if (_isDrag) return;						_isDrag = true;			if (_handle)				_handle.startDrag(false, _bound);			addEventListener(Event.ENTER_FRAME, enterFrameHandler);			dispatchEvent(new Event('startDrag'));		}				private function upHandler (e:MouseEvent):void {			// stop drag			if (!_isDrag) return;						_isDrag = false;			if (_handle)				_handle.stopDrag();			removeEventListener(Event.ENTER_FRAME, enterFrameHandler);			dispatchEvent(new Event('stopDrag'));		}				private function barDownHandler (e:MouseEvent):void {			if (e.target == _handle) return;			if (_isDrag) return;						// jump			var pos:Number 						if (_handle) {				pos = mouseX;				if (pos < _handleHalfWidth) pos = _handleHalfWidth;				else if (pos > _barWidth - _handleHalfWidth) pos = _barWidth - _handleHalfWidth;			} else {				pos = _bar.mouseX;			}						updateHandle(pos);			updateBar(getBarScaleX(pos));						dispatchEvent(new Event('update'));		}				private function enterFrameHandler (e:Event):void {			var pos:Number = _handle ? _handle.x : _bar.mouseX;			updateBar(getBarScaleX(pos));						dispatchEvent(new Event('update'));		}				private function removeFromStageHandler (e:Event):void {			removeEventListener(Event.REMOVED_FROM_STAGE, removeFromStageHandler);						removeEventListener(Event.ENTER_FRAME, enterFrameHandler);			if (_handle)				_handle.removeEventListener(MouseEvent.MOUSE_DOWN, handleDownHandler);			_hitArea.removeEventListener(MouseEvent.MOUSE_DOWN, barDownHandler);						stage.removeEventListener(MouseEvent.MOUSE_UP, upHandler);		}				public function destroy ():void {			removeFromStageHandler(null);		}	}	}