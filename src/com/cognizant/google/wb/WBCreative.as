package com.cognizant.google.wb {	import com.cognizant.google.video.components.ExPlayer;	import com.cognizant.google.video.events.CustomVideoEvent;	import com.cognizant.google.wb.components.WBPlayer;	import com.cognizant.google.wb.events.WBEvent;	import com.google.ads.studio.events.StudioEvent;	import com.google.ads.studio.ProxyEnabler;	import flash.display.DisplayObject;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.utils.Timer;				[Event(name="interacted",type="com.cognizant.google.wb.events.WBEvent")]	[Event(name="autoExpanded",type="com.cognizant.google.wb.events.WBEvent")]	[Event(name="autoExpandEnd",type="com.cognizant.google.wb.events.WBEvent")]	[Event(name="expanded",type="com.cognizant.google.wb.events.WBEvent")]	[Event(name="collapsed",type="com.cognizant.google.wb.events.WBEvent")]	[Event(name="videoAutoplayEnd",type="com.cognizant.google.wb.events.WBEvent")]	[Event(name="videoAutoAdvanced",type="com.cognizant.google.wb.events.WBEvent")]	[Event(name="enterFullscreen",type="com.cognizant.google.wb.events.WBEvent")]	[Event(name="exitFullscreen",type="com.cognizant.google.wb.events.WBEvent")]		/**	 * ...	 * @author Rafael Nepomuceno	 * @created 6/17/2015 1:38 AM	 */	public class WBCreative extends EventDispatcher {		private static var __instance:WBCreative;				public var collapsed:DisplayObject;		public var expanded:DisplayObject;				public var introVideo:ExPlayer;		public var collapsedVideo:WBPlayer;		public var expandedVideo:WBPlayer;						/// loosely typed object		public var data:Object;				private var _autoExpandTimer:Timer;		private var _expanding:Object;		private var _enabler:ProxyEnabler;				private var _isInteracted:Boolean;		private var _isExpanded:Boolean;		private var _isAutoExpanded:Boolean;		private var _isStartExpanded:Boolean;				public function get isInteracted ():Boolean { return _isInteracted; }		public function get isExpanded ():Boolean { return _isExpanded; }		public function get isAutoExpanded ():Boolean { return _isAutoExpanded; }						public static function getInstance ():WBCreative {			if (!__instance) __instance = new WBCreative(new SingletonEnforcer());			return __instance;		}				public function WBCreative (s:SingletonEnforcer) {			_enabler = ProxyEnabler.getInstance();			_expanding = _enabler.getExpanding();						if (_expanding) {				_expanding.addEventListener(					StudioEvent.COLLAPSE_COMPLETE, collapsedHandler);				_expanding.addEventListener(					StudioEvent.EXPAND, expandedHandler);			}						_enabler.addEventListener(StudioEvent.EXIT, exitHandler);			ExPlayer.addAllEventListeners(videoEventsHandler);		}						public function startAutoExpand (timeout:int = 0):void {			if (_isStartExpanded) return;			_isStartExpanded = true;						if (_expanding) {				if (timeout > 0) {					_autoExpandTimer = new Timer(timeout, 1);					_autoExpandTimer.addEventListener(TimerEvent.TIMER_COMPLETE, autoExpandTimeoutHandler);					_autoExpandTimer.start();					}								_expanding.startExpanded();				_isAutoExpanded = true;				dispatchEvent(new WBEvent(WBEvent.AUTO_EXPANDED));			}					}				public function expand ():void {			if (isExpanded) return;						if (_expanding) {				interact();				_expanding.expand();				_isExpanded = true;			}		}				public function collapse (isManualClose:Boolean = false):void {			if (!isExpanded) return;						if (_expanding) {				interact();								_expanding.collapse();				_isExpanded = false;				_isAutoExpanded = false;								if (isManualClose) 					_enabler.reportManualClose();			}		}				public function interact ():void {			_isInteracted = true;			if (_autoExpandTimer) {				_autoExpandTimer.reset();				_autoExpandTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, autoExpandTimeoutHandler);				_autoExpandTimer = null;			}			dispatchEvent(new WBEvent(WBEvent.INTERACTED));		}				public function videoAutoAdvance ():void {			dispatchEvent(new WBEvent(WBEvent.VIDEO_AUTO_ADVANCED));		}				public function enterFullscreen ():void {			dispatchEvent(new WBEvent(WBEvent.ENTER_FULLSCREEN));		}				public function exitFullscreen ():void {			dispatchEvent(new WBEvent(WBEvent.EXIT_FULLSCREEN));		}								private function autoExpandTimeoutHandler (e:TimerEvent):void {			dispatchEvent(new WBEvent(WBEvent.AUTO_EXPAND_END));		}				private function exitHandler (e:StudioEvent):void {			if (isExpanded) {				if (isAutoExpanded)					dispatchEvent(new WBEvent(WBEvent.AUTO_EXPAND_END));				collapse();			}		}				private function expandedHandler (e:StudioEvent):void {			_isExpanded = true;			dispatchEvent(new WBEvent(WBEvent.EXPANDED));		}				private function collapsedHandler (e:StudioEvent):void {			_isExpanded = false;			_isAutoExpanded = false;			dispatchEvent(new WBEvent(WBEvent.COLLAPSED));		}								private function videoEventsHandler (e:CustomVideoEvent):void {			switch (e.type) {				case CustomVideoEvent.PREVIEW_COMPLETE:					dispatchEvent(new WBEvent(WBEvent.VIDEO_AUTOPLAY_END, e.data));				case CustomVideoEvent.COMPLETE:					if (isAutoExpanded && !isInteracted) {						dispatchEvent(new WBEvent(WBEvent.AUTO_EXPAND_END));						collapse();					}					break;			}		}					}}class SingletonEnforcer {}