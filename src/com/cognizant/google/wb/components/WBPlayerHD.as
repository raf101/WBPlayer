package com.cognizant.google.wb.components {	import com.cognizant.google.video.components.ExPlayer;	import com.cognizant.google.video.data.PlayerSettings;	import com.cognizant.google.video.events.CustomVideoEvent;	import com.cognizant.google.wb.components.controls.WBPlaybackController;	import com.cognizant.google.wb.WBCreative;	import com.google.ads.studio.events.StudioEvent;	import com.google.ads.studio.ProxyEnabler;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.geom.Rectangle;	import flash.system.Capabilities;	/**	 * ...	 * @author Rafael Nepomuceno	 * @created 6/21/2015 9:47 AM	 * 	 * @see https://gist.github.com/raf101/53533a4e3305353109f7#file-wbplayer	 */	public class WBPlayerHD extends MovieClip {		// Stage's instances.		public var bg:MovieClip;		public var container:MovieClip;		public var btnReplay:MovieClip;		public var bufferingIndicator:MovieClip;		public var controller:MovieClip;						private var _video:ExPlayer;		private var _ctrl:WBPlaybackController;		private var _wb:WBCreative;				public function get ctrl ():WBPlaybackController { return _ctrl; }				public function get video ():ExPlayer { return _video; }				public function WBPlayerHD (  ) {			_wb = WBCreative.getInstance();						if (stage) addedToStageHandler();			else addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);					}				private function addedToStageHandler ( e:Event = null ):void {			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			ProxyEnabler.getInstance().addEventListener(StudioEvent.FULL_SCREEN_EXIT, studioFullScreenExitHandler);						resizeToFullscreen();		}						public function init ( settings:PlayerSettings ):void {			// constructor code			_wb = WBCreative.getInstance();						_video = new ExPlayer();			_video.init(settings);			_video.addEventListener(CustomVideoEvent.EXIT_FULLSCREEN, exitFullscreenHandler);			_video.addEventListener(CustomVideoEvent.BUFFERING, bufferingHandler);			_video.addEventListener(CustomVideoEvent.BUFFERED, bufferedHandler);			container.addChild(_video);						_ctrl = new WBPlaybackController(_video);						_ctrl.setPlayToggle(controller.togglePlay);			_ctrl.setMuteToggle(controller.toggleMute);						_ctrl.setSkipToToggle(controller.toggleSkipTo0, 0);			_ctrl.setSkipToToggle(controller.toggleSkipTo1, 1);			_ctrl.setReplayButton(controller.btnReplay);			_ctrl.setBtnExitFullscreen(controller.btnExitFullScreen);					}				private function exitFullscreen ():void {						_wb.exitFullscreen({videoIndex:_video.getCurrentVideoIndex()});						stage.removeChild(this);		}				private function resizeToFullscreen ():void {			var videoDimension:Rectangle = _video.settings.dimension;			var screenWidth:Number = Capabilities.screenResolutionX;			var screenHeight:Number = Capabilities.screenResolutionY;			var vidWidth:Number = videoDimension.width;			var vidHeight:Number = videoDimension.height;						if (ProxyEnabler.getInstance().isRunningLocally()) {				screenWidth = stage.width;				screenHeight = stage.height;								trace(screenWidth, screenHeight);			}						if (vidWidth >= vidHeight) {				vidHeight = screenWidth / (vidWidth / vidHeight);				vidWidth = screenWidth;								videoDimension.y = (screenHeight - vidHeight) * 0.5;			} else {				vidWidth = (vidWidth / vidHeight) * screenHeight;				vidHeight = screenHeight;								videoDimension.x = (screenWidth - vidWidth) * 0.5;			}						videoDimension.width = vidWidth;			videoDimension.height = vidHeight;						_video.componentInstance.x = videoDimension.x;			_video.componentInstance.y = videoDimension.y;			_video.componentInstance.width = videoDimension.width;			_video.componentInstance.height = videoDimension.height;						controller.y = screenHeight - 40;			controller.bg.width = bg.width = screenWidth;			bg.height = screenHeight;						controller.btnExitFullScreen.x = screenWidth - (controller.btnExitFullScreen.width * 0.5) - 40;			controller.toggleSkipTo1.x = controller.btnExitFullScreen.x - 40;			controller.toggleSkipTo0.x = controller.toggleSkipTo1.x - 20;									btnReplay.x = screenWidth * 0.5;			btnReplay.y = screenHeight * 0.5;						bufferingIndicator.x = btnReplay.x - (bufferingIndicator.width * 0.5);			bufferingIndicator.y = btnReplay.y - (bufferingIndicator.height * 0.5);		}				private function studioFullScreenExitHandler (e:StudioEvent):void {			exitFullscreen();		}				private function exitFullscreenHandler (e:CustomVideoEvent):void {			e.target.removeEventListener(CustomVideoEvent.EXIT_FULLSCREEN, exitFullscreenHandler);						if (ProxyEnabler.getInstance().isRunningLocally()) {				studioFullScreenExitHandler(null);			} else {				ProxyEnabler.getInstance().exitFullScreen();			}					}				private function bufferingHandler (e:CustomVideoEvent):void {			bufferingIndicator.visible = true;		}				private function bufferedHandler (e:CustomVideoEvent):void {			bufferingIndicator.visible = false;		}			}}